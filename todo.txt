--TODO--

Mardi 18/12/2018

Trouver les définitions des termes de la liste ci-dessous et les écrire sur un cahier :

- [x] Langage dynamique et statique + exemples
- [x] Variables dynamiques
- [x] Inférence
- [x] Chaîne de caractères "3,14", méthodes utilisées pour transformer en integer
- [x] Développement objet
- [x] Classe
- [x] Instance d'une classe
- [x] Propriété/attribut
- [x] Méthode privée, publique
- [x] Constructeur
- [x] Héritage
- [x] Classe abstraite
- [x] DOM

Mercredi 19/12/2018

Implémenter les fonctionnalités suivantes :

- [x] une fonction de tri croissant sur un tableau contenant des entiers
- [ ] une fonction de tri décroissant sur un tableau contenant des entiers

Jeudi 20/12/2018

- [x] Chaine de caractère avec la definition + trouver des exemples
- [x] Trouver des définitions avec des exemples en langage Javascript.
- [x] Rechercher la plus petite valeur dans le tableau (exercice 8)

Samedi 29/12/2018

- [x] Refaire les exercices avec la fonction de Rechercher.
- [x] Trouver les definitions : classe, propiété, méthode.
- [x] Relire comment faire une fonction + exemple de fonction d'addition avec tableau de valeur en entrée et en sortie la somme du tableau en retour ---> lesson12
- [x] Faire algorithme 'regrouper les nombres de meme valeur' --> lesson13
- [x] Définir les objets d'une voiture, moto, facture, comment parcourir une liste objet.


Jeudi 03/01/2019

- [x] Ajouter commentaires.
- [x] Fonction Recherche de la plus grande valeur.
- [x] Faire des classes selon les schémas comme voiture, facture et moto.
- [x] Renommer lessons.

- [ ] Exemple programmation objet en Javascript avec type littéral et classique, 
- [ ] CSS/HTML concepts fondamentaux 
- [ ] Programme JS pour manipuler les balises HTML (en manipulant le DOM)

- [x] 18-lesson : autre algo => Remplacer toutes les valeurs divisibles par 2, leur ajouter +1.

Samedi 05/01/2019

- [x] Méthode de calcul dans la lesson16 pour éviter des doublons (factorisation du code)
- [x] Remplacer toutes les valeurs divisibles par 2, par  la valeur divisible +1
- [x] exercice 19
- [x] css slides

Mardi 08/01/2019

- [x] faire une synthèse de toute les règles autour de l'implémentation des classes objet (donnnées calculées, getter setter, propriétés publiques, privées) en UNE seule feeuille tous les éléments.
- [x] faire algo "les chats ne mangent pas les chiens. Et les souris sont mangées par les chats" ----> fonction qui va stocker dans un tableau tous les mots.
- [x] relire (ré-éxécuter) exercice 19-bis
- [x] refaire exercice 19 (créer facture et ajouter lignes de facture)
- [x] réfléchir a l'exercice 21 : cumuler les totaux des lignes  de  facture : pour y acceder : ligne.montantHT...
- [x] relire tous les documents.
- [x] regarder différence entre format json et format javascript.

Vendredi 11/01/2019

- [x] Refaire exercice 20 
- [x] exercice pour concaténer des lettres pour faire des mots, en faire des réflexes.
- [x] Implémenter propiété : nombre de lignes.
- [x] Commenter 19-lesson
- [x] Rédiger compte-rendu d'apprentissage de la journée.
- [x] créer dossiers pour chaque lesson et mettre index.
- [x] Rédiger document : toutes les règles depuis le début. 
- [ ] Résumer newsletter.

Mardi 15/01/2019 :

- [x] prendre un texte et compter le nb de fois que je trouve la lettre selectionée
ex : "le chat mange la souris" => combien de fois y-a t-il la lettre l ?
- [x] rechercher callbacks avec exemples
- [x] difference entre promise et un callbacks
- [x] ES5 vs ES6
- [x] github pages
- [x] rechercher l'héritage en javascript
- [x] s'entrainer avec try catch throw + facture

Vendredi 18/01/2019 :

- [x] bilan de mardi et aujourd'hui (ok)
- [x] refaire feuille d'evaluation en regroupant par thème sur papier (ok)
- [x] réecrire règles de codage en paysage (ok)
- [x] générer un site à partir d'un repository sur un autre repository github pages (ok)
- [x] faire exemples de callbacks (ok)
- [x] exercice : créer une bibliothèque de livres : 28-lesson (ok)
- [x] exercice de la prise de sang : 27-lesson (ok)



Mercredi 23/01/2019 :

- [X] exemples et exercices de try and catch
- [X] réaliser exercice concessionnaire en s'inspirant de facture 
- [X] apprendre par COEUR règles
- [X] refaire évaluation du dessin


Vendredi 25/01/2019 :

- [X] revoir l'héritage (OK)
- [X] travailler jeu de données (OK)
- [X] relire facture (OK)
- [X] règles => interro (OK)
- [X] pas de copier-coller (OK)
- [X] compte-rendu React Native sur feuille

- [X] créer des cellules sur 2 lignes en HTML/CSS, avec des div (float,margin,breakline) (OK)
- [X] balises sections HTML, flex-flow en CSS (utilisation) sur feuille (OK)
- [X] classes de couleur : 1er exercice feuille (OK)
- [X] faire un objet tableau avec cellules et lignes sur papier (schema), puis implémentation code (ajouter lignes + 5 cellules/ligne) (OK)
- [X] try and catch exemple (OK)
- [X] différence json et javascript object (conditions d'utilisation) sur feuille (OK)
- [X] exercice 2 : html rectangle voir feuille (OK)


Mardi 29/01/2019 :

- [X] mettre en lesson tryandcatch OK
- [X] exemples flex-flow OK
- [X] exercice sections OK
- [X] installer serveur node.js avec express => https://www.grafikart.fr/formations/nodejs
- [X] voir si plusieurs store sur redux
- [X] definir REST
- [X] recherche API sous express.js
- [X] INTERRO sur tout + js => objet litteral != json

Vendredi 01/02/2019 :

- [X] kit de dev : commandes à utiliser sous git  OK
- [X] différence entre serveur classique et serveur node.js 
- [X] écrire REST (put,get,post,)
- [X] position absolue et relative avec exemples
- [X] flexbox schémas à faire avec exemples

Mardi 6/02/2019 :

- [X] mettre à jour papier flexbox et autres

- [X] stocker docs dans documentation

- [X] rechercher informations pour construire API : {

    - information/faire routage avec express --> OK

    - connecter à une base de donnnées --> OK 

    - Graphql --> OK 
}



Vendredi 8/02/2019 :

- [X] commenter flexbox papier
- [X] interro REST
- [X] implémenter relation cardinalité  1-1 et 1-n 
- [X] lire base de donnnées
- [X] data mapper -> squeelize
- [X] mettre en es6 les imports + const
- [X] mvc recherche
- [X] regarder microservices
- [X] amazon lambda
- [X] async/await
- [X] installer environnement Solidity


Mardi 12/02/2019 :

- [X] exemple AWS lambda
- [X] exemple async/await
- rajouter champs :
- [X] ajouter dans api-project : colonnes au schéma de base de donnée user
- [X] ajouter dans api-project la table message
- [X] construire le routage pour se connecter a l'utilisateur et pour créer l'utilisateur
- [X] créer les controllers (ref --> lesson34)
- [X] interrogation objet sur rest 
- [X] regarder script de table
- [X] relire mcd 

Vendredi 12/02/2019 :

-[X] faire api pour récupérer liste des utilisateurs
-[X] promise
-[X] voir destructuring serialization
-[ ] relire


Jeudi 21/02/2019 : 

-[X] rajouter méthode de classe static dans dossier objet
-[X] schéma de fonctionnement de api-project
-[X] TOUJOURS git status après git add .

-[X] ajouter commentaires
-[X] créer page html users qui affiche liste des utilisateurs de la db
-[X] ajouter bootstrap
-[ ] page avec composant react 

Vendredi 01/03/2019 :

-[X] ajouter popper a api-project
-[X] faire les vues signup, users
-[X] refaire les schemas des composants react-native
-[X] ajouter nom et prenom dans base de donnees (migrate +model), suppr puis recreer base
-[X] renvoyer vers accueil apres submit

-[ ] react native
-[ ] tuto react 



Jeudi 07/03/2019 :

-[ ] Ajouter méthodes dans sessionController
-[ ] Ajouter authentification (cookies, proxies, session)
-[ ] Ajouter Materialize
-[ ] 
-[ ]
-[ ]
-[ ]
-[ ]
